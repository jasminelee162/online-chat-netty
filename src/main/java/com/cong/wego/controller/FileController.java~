package com.cong.wego.controller;

import cn.dev33.satoken.annotation.SaCheckLogin;
import cn.dev33.satoken.context.SaHolder;
import cn.dev33.satoken.exception.NotLoginException;
import cn.dev33.satoken.stp.StpUtil;
import cn.hutool.core.io.FileUtil;
import cn.hutool.json.JSONUtil;
import com.cong.wego.common.BaseResponse;
import com.cong.wego.common.ErrorCode;
import com.cong.wego.common.ResultUtils;
import com.cong.wego.constant.FileConstant;
import com.cong.wego.exception.BusinessException;
import com.cong.wego.manager.CosManager;
import com.cong.wego.model.dto.file.UploadFileRequest;
import com.cong.wego.model.entity.Message;
import com.cong.wego.model.entity.User;
import com.cong.wego.model.enums.FileUploadBizEnum;
import com.cong.wego.model.enums.chat.MessageTypeEnum;
import com.cong.wego.model.vo.message.ChatMessageVo;
import com.cong.wego.model.vo.ws.request.WSBaseReq;
import com.cong.wego.service.MessageService;
import com.cong.wego.service.UserService;

import java.io.*;
import java.net.InetAddress;
import java.net.URLEncoder;
import java.util.Arrays;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.cong.wego.websocket.service.WebSocketService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import javafx.scene.canvas.GraphicsContext;
import kotlin.Result;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;


@RestController
@RequestMapping("/file")
@Slf4j
@Api(value = "文件")
public class FileController {

    @Resource
    private UserService userService;

    @Resource
    private CosManager cosManager;

    @Resource
    private WebSocketService webSocketService;

    @Resource
    private MessageService messageService;

    /**
     * 上传文件
     * 文件上传
     *
     * @param multipartFile     multipart 文件
     * @param uploadFileRequest 上传文件请求
     * @return {@link BaseResponse}<{@link String}>
     */
    @PostMapping("/upload")
    @ApiOperation(value = "文件上传")
    public BaseResponse<String> uploadFile(@RequestPart("file") MultipartFile multipartFile,
                                           UploadFileRequest uploadFileRequest) {
        String biz = uploadFileRequest.getBiz();
        FileUploadBizEnum fileUploadBizEnum = FileUploadBizEnum.getEnumByValue(biz);
        if (fileUploadBizEnum == null) {
            throw new BusinessException(ErrorCode.PARAMS_ERROR);
        }
        validFile(multipartFile, fileUploadBizEnum);
        User loginUser = userService.getLoginUser();
        // 文件目录：根据业务、用户来划分
        String uuid = RandomStringUtils.randomAlphanumeric(8);
        String filename = uuid + "-" + multipartFile.getOriginalFilename();
        String filepath = String.format("/%s/%s/%s", fileUploadBizEnum.getValue(), loginUser.getId(), filename);
        File file = null;
        try {
            // 上传文件
            file = File.createTempFile(filepath, null);
            multipartFile.transferTo(file);
            cosManager.putObject(filepath, file);
            // 返回可访问地址
            return ResultUtils.success(FileConstant.COS_HOST + filepath);
        } catch (Exception e) {
            log.error("file upload error, filepath = " + filepath, e);
            throw new BusinessException(ErrorCode.SYSTEM_ERROR, "上传失败");
        } finally {
            if (file != null) {
                // 删除临时文件
                boolean delete = file.delete();
                if (!delete) {
                    log.error("file delete error, filepath = {}", filepath);
                }
            }
        }
    }

    /**
     * 校验文件
     *
     * @param fileUploadBizEnum 业务类型
     * @param multipartFile     multipart 文件
     */
    @ApiOperation(value = "校验文件")
    private void validFile(MultipartFile multipartFile, FileUploadBizEnum fileUploadBizEnum) {
        // 文件大小
        long fileSize = multipartFile.getSize();
        // 文件后缀
        String fileSuffix = FileUtil.getSuffix(multipartFile.getOriginalFilename());
        final long oneM = 1024 * 1024L;
        if (FileUploadBizEnum.USER_AVATAR.equals(fileUploadBizEnum)) {
            if (fileSize > oneM) {
                throw new BusinessException(ErrorCode.PARAMS_ERROR, "文件大小不能超过 1M");
            }
            if (!Arrays.asList("jpeg", "jpg", "svg", "png", "webp").contains(fileSuffix)) {
                throw new BusinessException(ErrorCode.PARAMS_ERROR, "文件类型错误");
            }
        }
    }

    @SaCheckLogin  // 验证登录状态
    @PostMapping("/uploadChatFile")
    public BaseResponse<String> uploadChatFile(@RequestParam("file") MultipartFile file,
                                               @RequestParam("type") String type,
                                               @RequestParam(value = "roomId", required = false) Long roomId,
                                               @RequestParam(value = "toUserId", required = false) Long toUserId,
                                               HttpServletRequest request) {
        log.info("[文件上传] 请求开始，文件名: {}, type: {}, roomId: {}, toUserId: {}",
                file.getOriginalFilename(), type, roomId, toUserId);

        // 获取 Token 从请求头 Authorization
        String token = request.getHeader("Authorization");  // 从 HTTP 请求头获取 Token
        log.info("请求头中的 Authorization: {}", request.getHeader("Authorization"));
        if (token == null || !token.startsWith("Bearer ")) {
            log.error("Token 不存在或格式错误: {}", token);
            return ResultUtils.error(ErrorCode.PARAMS_ERROR, "未登录或 token 无效");
        }
        token = token.substring(7);  // 去除 "Bearer " 前缀
        StpUtil.getStpLogic().setTokenValue(token);
        log.info("获取到 Token: {}", token);  // 打印 Token，确认是否正确
        try {
            // 验证 Token 是否有效
            StpUtil.checkLogin();  // 如果 Token 无效，将抛出 NotLoginException
            Long userId = StpUtil.getLoginIdAsLong();  // 获取登录用户的 ID
            log.info("获取到用户 ID: {}", userId);

            if (userId == null) {
                return ResultUtils.error(ErrorCode.PARAMS_ERROR, "未登录或 token 无效");
            }

            if (file == null || file.isEmpty()) {
                log.warn("[文件上传] 上传文件为空");
                return ResultUtils.error(ErrorCode.PARAMS_ERROR, "上传文件为空");
            }

            if (!"GROUP".equalsIgnoreCase(type) && !"PRIVATE".equalsIgnoreCase(type)) {
                log.warn("[文件上传] 参数错误，type 不是 GROUP 或 PRIVATE");
                return ResultUtils.error(ErrorCode.PARAMS_ERROR, "type 参数必须为 GROUP 或 PRIVATE");
            }

            // 文件保存路径
            String basePath = "D:/wego_chat_files/"; // 确保这个路径是存在的
            File dir = new File(basePath);
            if (!dir.exists()) {
                boolean mkdirResult = dir.mkdirs();
                log.info("[文件上传] 创建目录: {} 结果: {}", basePath, mkdirResult);
            }

            String originalFilename = file.getOriginalFilename();
            String fileName = UUID.randomUUID() + "_" + originalFilename;
            String savePath = basePath + fileName;
            log.info("[文件上传] 准备保存文件到: {}", savePath);
            file.transferTo(new File(savePath));
            log.info("[文件上传] 文件保存成功");

            // 获取服务器的IP地址或主机名
            String serverIp = InetAddress.getLocalHost().getHostAddress(); // 获取服务器的IP
            String fileUrl = "http://" + serverIp + ":8869/api/file/download/" + fileName;
            log.info("[文件上传] 文件可访问 URL: {}", fileUrl);

            // 创建文件信息对象
            Map<String, Object> fileInfo = new HashMap<>();
            fileInfo.put("size", file.getSize());
            fileInfo.put("type", file.getContentType());
            fileInfo.put("fileUrl", fileUrl);
            fileInfo.put("fileName", originalFilename);
            log.info("[文件上传] 文件信息: {}", fileInfo);

            // 创建消息对象
            Message message = new Message();
            message.setRoomId(roomId); // 或者 -1L，按你业务逻辑定
            message.setFromUid(userId);
            message.setContent(originalFilename);  // 仅保存文件名
            message.setType(6); // 文件类型
            message.setExtra(JSONUtil.toJsonStr(fileInfo)); // 将文件信息存储为 JSON 格式
            message.setStatus(0); // 正常状态
            log.info("[文件上传] 消息对象: {}", message);

//            // 保存消息到数据库（此时不会拼接额外的消息）
//            if (message.getType() == 6) { // 只处理文件类型的消息
//                messageService.save(message);
//                log.info("[文件上传] 消息已保存到数据库");
//            }

            // 验证发送对象的有效性
            if ("PRIVATE".equals(type) && toUserId == null) {
                log.error("[文件上传] toUserId 为空，无法进行私聊消息发送");
                return ResultUtils.error(ErrorCode.PARAMS_ERROR, "toUserId 不能为空");
            }

            if ("GROUP".equals(type) && roomId == null) {
                log.error("[文件上传] roomId 为空，无法进行群聊消息发送");
                return ResultUtils.error(ErrorCode.PARAMS_ERROR, "roomId 不能为空");
            }

            log.info("[文件上传] 准备发送消息");
            // 根据消息类型发送文件给接收方
            WSBaseReq wsBaseReq = new WSBaseReq();
            if ("PRIVATE".equals(type)) {
                wsBaseReq.setType(2);
                wsBaseReq.setUserId(toUserId); // 发送给单个接收方
                log.info("[文件上传] 发送消息给接收方: {}", wsBaseReq.getUserId());
            } else {
                wsBaseReq.setType(1);
                wsBaseReq.setUserId(roomId); // 发送给群组所有成员
            }

            // 发送文件信息（文件名和 URL）
//            wsBaseReq.setData(JSONUtil.toJsonStr(new ChatMessageVo(wsBaseReq.getType(), "file", originalFilename, fileUrl)));  // 发送文件信息
// 创建 ChatMessageVo 对象
            ChatMessageVo chatMessageVo = new ChatMessageVo();
            System.out.println(type);
            chatMessageVo.setType("PRIVATE".equals(type) ? 2 : 1);  // 消息类型：1 群聊，2 私聊
            chatMessageVo.setContent(originalFilename);  // 文件名
            chatMessageVo.setSendTime(message.getCreateTime());  // 发送时间
            chatMessageVo.setContentType("file");  // 内容类型为“文件”
            chatMessageVo.setToUid("PRIVATE".equals(type) ? String.valueOf(toUserId) : null);  // 私聊目标用户

// 构建文件信息
            ChatMessageVo.FileInfo fileInfoObj = new ChatMessageVo.FileInfo();
            fileInfoObj.setName(originalFilename);  // 文件名
            fileInfoObj.setUrl(fileUrl);  // 文件下载链接
            fileInfoObj.setSize(file.getSize());  // 文件大小（字节）
            fileInfoObj.setType(file.getContentType());  // 文件 MIME 类型

// 设置文件信息
            chatMessageVo.setFile(fileInfoObj);  // 设置文件信息

// 将保存的消息的 id 和 extra 添加到 chatMessageVo 中
            chatMessageVo.setExtra(message.getExtra());  // 设置消息的额外信息（如果有）
            System.out.println(chatMessageVo);

// 转成 JSON 并发送 WebSocket 消息
            wsBaseReq.setData(JSONUtil.toJsonStr(chatMessageVo));  // 转换为 JSON 字符串并发送
            System.out.println(JSONUtil.toJsonStr(chatMessageVo));


            System.out.println("==========================================================");
            log.info("[文件上传] 发送消息: {}", wsBaseReq.getData());

            // 发送消息给 WebSocket
            webSocketService.sendMessage(token, wsBaseReq);
            log.info("[文件上传] 消息已发送成功");

            return ResultUtils.success(fileUrl);
        } catch (NotLoginException e) {
            log.error("[文件上传] Token 无效", e);
            return ResultUtils.error(ErrorCode.PARAMS_ERROR, "未登录或 token 无效");
        } catch (IOException e) {
            log.error("[文件上传] 上传失败", e);
            return ResultUtils.error(ErrorCode.SYSTEM_ERROR, e.getMessage());
        } catch (Exception e) {
            log.error("[文件上传] 系统异常", e);
            return ResultUtils.error(ErrorCode.SYSTEM_ERROR, "未知错误: " + e.getMessage());
        }
    }

    // 下载聊天文件
    @GetMapping("/download/{filename:.+}")
    public void downloadFile(@PathVariable String filename, HttpServletResponse response) {
        String basePath = "D:/wego_chat_files/"; // 服务器存储路径
        File file = new File(basePath + filename);

        log.info("[文件下载] 准备下载文件: {}", filename);
        if (!file.exists()) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        response.setContentType("application/octet-stream");

        try {
            String encodedFilename = URLEncoder.encode(filename, "UTF-8").replaceAll("\\+", "%20");
            response.setHeader("Content-Disposition", "attachment; filename=\"" + encodedFilename + "\"");
            response.setHeader("Content-Length", String.valueOf(file.length()));

            try (InputStream inputStream = new FileInputStream(file);
                 OutputStream outputStream = response.getOutputStream()) {
                log.info("[文件下载] 开始下载文件");
                byte[] buffer = new byte[1024];
                int length;
                while ((length = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                outputStream.flush();
                log.info("[文件下载] 文件下载成功");
            }
        } catch (IOException e) {
            log.info("[文件下载] 文件下载失败");
            e.printStackTrace();
        }
    }

}